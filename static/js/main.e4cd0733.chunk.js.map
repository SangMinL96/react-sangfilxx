{"version":3,"sources":["useAsync.js","movies/HomeMainImg.js","movies/PopContent.js","movies/NowMovie.js","Home/Home.js","TV/OnAir.js","TV/PopTV.js","TV/TV.js","Search/Search.js","Datail/MovieDetail.js","components/Header.js","Datail/TVDetail.js","components/Routes.js","components/GlobalStyles.js","components/App.js","serviceWorker.js","index.js"],"names":["reducer","state","action","type","loading","data","error","Error","useAsync","URL","deps","useReducer","dispatch","fatchData","a","axios","get","response","useEffect","MainImgContainer","styled","div","props","bgImg","MainImgTitle","h3","MainImgRating","MainImgContent","p","HomeMainImg","console","log","backdrop_path","original_title","vote_average","runtime","overview","PopContainer","PopItems","Link","NextArrow","className","style","onClick","display","backgroundColor","position","right","width","height","fontSize","justifyContent","alignItems","PrevArrow","sliderContainer","left","zIndex","PopContent","sliderSettings","nextArrow","prevArrow","dots","infinite","speed","slidesToShow","slidesToScroll","variableWidth","centerMode","results","map","item","to","id","key","poster_path","NowWallpaper","NowGrid","NowGridItem","NowMovie","Home","OnAirWallpaper","OnAirGrid","OnAirGridItem","OnAir","PopTvWallpaper","PopTvGrid","PopTvGridItem","PopTv","TV","PopTV","SearchWallpaper","section","SearchForm","form","SearchItems","SearchItem","Search","useState","query","setQuery","movies","setMovie","focusSearch","useRef","current","focus","getMovie","fetch","json","movieData","sleep","ms","Promise","resolve","setTimeout","currentQuery","controller","AbortController","loadMovies","abort","fluid","placeholder","ref","onChange","e","target","value","title","DetailWallpaper","DetailContainer","DetailPoster","DetailContent","Detail","match","params","detailURL","production_companies","HeaderContainer","Nav","ul","NavList","li","hover","NavLink","withRouter","pathname","location","TVDetail","name","episode_run_time","Routes","path","exact","component","MovieDetail","GlobalStyles","createGlobalStyle","reset","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e4cd0733.chunk.js","sourcesContent":["import { useReducer, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOADING\":\r\n      return {\r\n        loading: true,\r\n        data: null,\r\n        error: null,\r\n      };\r\n    case \"SUCCESS\":\r\n      return {\r\n        loading: false,\r\n        data: action.data,\r\n        error: null,\r\n      };\r\n\r\n    case \"ERROR\":\r\n      return {\r\n        loading: false,\r\n        data: null,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      throw new Error(`action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nfunction useAsync(URL, deps = []) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    loading: false,\r\n    data: null,\r\n    error: null,\r\n  });\r\n  const fatchData = async () => {\r\n    dispatch({ type: \"LOADING\" });\r\n    try {\r\n      const response = await axios.get(URL);\r\n      dispatch({ type: \"SUCCESS\", data: response.data });\r\n    } catch (e) {\r\n      dispatch({ type: \"ERROR\", error: e });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fatchData();\r\n    //eslint-disable-next-line\r\n  }, deps);\r\n  return [state, fatchData];\r\n}\r\n\r\nexport default useAsync;\r\n\r\n// async function getMain() {\r\n//   const response = await axios.get(\r\n//     \"https://api.themoviedb.org/3/movie/583083?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US\"\r\n//   );\r\n//   return response.data;\r\n// }\r\n\r\n// 자세한 사용법.\r\n// const [state, fatchData] = useAsync(URL, [], true);\r\n//   const [userId, setUserId] = useState(null);\r\n//   const { data, error, loading } = state;\r\n//   if (loading) return <div>로딩중...</div>;\r\n//   if (error) return <div>에러가 발생</div>;\r\n//   if (!data) return <button onClick={fatchData}>불러오기</button>;\r\n//   console.log(userId);\r\n//   return (\r\n//     <>\r\n//       <ul>\r\n//         {data.map((user) => (\r\n//           <li key={user.id} onClick={() => setUserId(user.id)}>\r\n//             {user.username}({user.name})\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <button onClick={fatchData}>다시불러오기</button>\r\n//       <div> {userId && <User id={userId} />}</div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default UseStateApi;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport useAsync from \"../useAsync\";\r\n\r\nconst MainImgContainer = styled.div`\r\n  width: 100%;\r\n  height: 90vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n  background-size: 100% 100%;\r\n`;\r\n\r\nconst MainImgTitle = styled.h3`\r\n  font-size: 5rem;\r\n  margin-left: 80px;\r\n  font-weight: 600;\r\n`;\r\nconst MainImgRating = styled.div`\r\n  margin-left: 80px;\r\n  margin-top: 1em;\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n`;\r\nconst MainImgContent = styled.p`\r\n  margin-top: 1em;\r\n  margin-left: 80px;\r\n  width: 600px;\r\n  font-size: 1.5rem;\r\n  line-height: 1.5;\r\n`;\r\n\r\nconst mainURL =\r\n  \"https://api.themoviedb.org/3/movie/583083?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US\";\r\n\r\nfunction HomeMainImg() {\r\n  const [state] = useAsync(mainURL);\r\n  const { data, error, loading } = state;\r\n  console.log(data);\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생</div>;\r\n  if (!data) return \"데이터가 없습니다\";\r\n\r\n  return (\r\n    <>\r\n      <MainImgContainer bgImg={data.backdrop_path}>\r\n        <MainImgTitle>{data.original_title}</MainImgTitle>\r\n        <MainImgRating>\r\n          평점: {data.vote_average}점 상영시간: {data.runtime}분{\" \"}\r\n        </MainImgRating>\r\n        <MainImgContent>{data.overview}</MainImgContent>\r\n      </MainImgContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomeMainImg;\r\n","import React from \"react\";\r\nimport useAsync from \"../useAsync\";\r\nimport Slider from \"react-slick\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nconst popURL =\r\n  \"https://api.themoviedb.org/3/movie/popular?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US&page=1\";\r\n//\r\n//\r\n//styled-components\r\nconst PopContainer = styled.div`\r\n  margin-top: 60px;\r\n  height: 300px;\r\n  width: 100%;\r\n\r\n  .slick-initialized {\r\n    height: 400px;\r\n    width: 95%;\r\n    margin: 0 auto;\r\n  }\r\n  .slick-active {\r\n    margin-left: 3px;\r\n    margin-right: 3px;\r\n  }\r\n  h3 {\r\n    margin-left: 1.7em;\r\n    margin-top: 2em;\r\n    margin-bottom: 2em;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nconst PopItems = styled(Link)`\r\n  width: 250px;\r\n  cursor: pointer;\r\n  height: 400px;\r\n  background-size: 100% 100%;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n  &:hover {\r\n    opacity: 70%;\r\n  }\r\n`;\r\n//\r\n//\r\n//styled-components\r\nfunction NextArrow(props) {\r\n  const { className, style, onClick } = props;\r\n  return (\r\n    <div\r\n      className={className}\r\n      style={{\r\n        ...style,\r\n        display: \"flex\",\r\n        backgroundColor: \"#000000de\",\r\n        position: \"absolute\",\r\n        right: \"-46px\",\r\n        width: \"45px\",\r\n        height: \"400px\",\r\n        fontSize: \"1.2rem\",\r\n        justifyContent: \"center\",\r\n\r\n        alignItems: \"center\",\r\n      }}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n}\r\n\r\nfunction PrevArrow(props) {\r\n  const { className: sliderContainer, style, onClick } = props;\r\n  return (\r\n    <div\r\n      className={sliderContainer}\r\n      style={{\r\n        ...style,\r\n        display: \"flex\",\r\n        backgroundColor: \"#000000de\",\r\n        position: \"absolute\",\r\n        left: \"-46px\",\r\n        zIndex: \"999\",\r\n        width: \"45px\",\r\n        height: \"400px\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n}\r\n\r\nfunction PopContent() {\r\n  const [state] = useAsync(popURL);\r\n  const { data, error, loading } = state;\r\n\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생</div>;\r\n  if (!data) return <div>받아온 데이터가 없습니다 ㅠㅠ</div>;\r\n  const sliderSettings = {\r\n    nextArrow: <NextArrow />,\r\n    prevArrow: <PrevArrow />,\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 5,\r\n    slidesToScroll: 5,\r\n    variableWidth: true,\r\n    centerMode: false,\r\n  };\r\n  return (\r\n    <PopContainer>\r\n      <h3>인기있는 영화</h3>\r\n      <Slider {...sliderSettings}>\r\n        {data.results.map((item) => (\r\n          <PopItems\r\n            to={`MovieDetail/${item.id}`}\r\n            style={{ width: 360 }}\r\n            key={item.id}\r\n            bgImg={item.poster_path}\r\n          ></PopItems>\r\n        ))}\r\n      </Slider>\r\n    </PopContainer>\r\n  );\r\n}\r\n\r\nexport default PopContent;\r\n","import React from \"react\";\r\nimport useAsync from \"../useAsync\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nconst nowURL =\r\n  \"https://api.themoviedb.org/3/movie/now_playing?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US&page=1\";\r\n//\r\n\r\nconst NowWallpaper = styled.div`\r\n  height: 800px;\r\n  h3 {\r\n    margin-left: 1.7em;\r\n    margin-top: 2em;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n  }\r\n`;\r\nconst NowGrid = styled.div`\r\n  padding-top: 2em;\r\n  margin: 0 auto;\r\n  width: 95%;\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 3fr);\r\n  grid-gap: 10px;\r\n`;\r\nconst NowGridItem = styled(Link)`\r\n  cursor: pointer;\r\n  margin-top: 1em;\r\n  width: 200px;\r\n  height: 200px;\r\n  background-size: 100% 100%;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n\r\n  &:hover {\r\n    opacity: 70%;\r\n    transform: scale(1.08);\r\n  }\r\n`;\r\nfunction NowMovie() {\r\n  const [state] = useAsync(nowURL);\r\n  const { data, error, loading } = state;\r\n\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생</div>;\r\n  if (!data) return <div>받아온 데이터가 없습니다 ㅠㅠ</div>;\r\n  return (\r\n    <NowWallpaper>\r\n      <h3>지금 상영중인 영화</h3>\r\n      <NowGrid>\r\n        {data &&\r\n          data.results.map((item) => (\r\n            <NowGridItem\r\n              to={`MovieDetail/${item.id}`}\r\n              key={item.id}\r\n              bgImg={item.poster_path}\r\n            ></NowGridItem>\r\n          ))}\r\n      </NowGrid>\r\n    </NowWallpaper>\r\n  );\r\n}\r\n\r\nexport default NowMovie;\r\n","import React from \"react\";\r\nimport HomeMainImg from \"../movies/HomeMainImg\";\r\nimport PopContent from \"../movies/PopContent\";\r\nimport NowMovie from \"../movies/NowMovie\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <HomeMainImg />\r\n      <NowMovie />\r\n      <PopContent />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport useAsync from \"../useAsync\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nconst onAirURL =\r\n  \"https://api.themoviedb.org/3/tv/on_the_air?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US&page=1\";\r\n\r\nconst OnAirWallpaper = styled.div`\r\n  height: 800px;\r\n  h3 {\r\n    margin-left: 1.7em;\r\n    margin-top: 2em;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n  }\r\n`;\r\nconst OnAirGrid = styled.div`\r\n  padding-top: 2em;\r\n  margin: 0 auto;\r\n  width: 95%;\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 3fr);\r\n  grid-gap: 10px;\r\n`;\r\nconst OnAirGridItem = styled(Link)`\r\n  cursor: pointer;\r\n  margin-top: 1em;\r\n  width: 200px;\r\n  height: 200px;\r\n  background-size: 100% 100%;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n\r\n  &:hover {\r\n    opacity: 70%;\r\n    transform: scale(1.08);\r\n  }\r\n`;\r\nfunction OnAir() {\r\n  const [state] = useAsync(onAirURL);\r\n  const { data, error, loading } = state;\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생</div>;\r\n  if (!data) return <div>받아온 데이터가 없습니다 ㅠㅠ</div>;\r\n  return (\r\n    <OnAirWallpaper>\r\n      <h3>지금 상영중인 프로그램</h3>\r\n      <OnAirGrid>\r\n        {data &&\r\n          data.results.map((item) => (\r\n            <OnAirGridItem\r\n              to={`TVDetail/${item.id}`}\r\n              key={item.id}\r\n              bgImg={item.poster_path}\r\n            ></OnAirGridItem>\r\n          ))}\r\n      </OnAirGrid>\r\n    </OnAirWallpaper>\r\n  );\r\n}\r\n\r\nexport default OnAir;\r\n","import React from \"react\";\r\nimport useAsync from \"../useAsync\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nconst popTVURL =\r\n  \"https://api.themoviedb.org/3/tv/popular?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US&page=1\";\r\n\r\nconst PopTvWallpaper = styled.div`\r\n  height: 800px;\r\n  h3 {\r\n    margin-left: 1.7em;\r\n    margin-top: 2em;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n  }\r\n`;\r\nconst PopTvGrid = styled.div`\r\n  padding-top: 2em;\r\n  margin: 0 auto;\r\n  width: 95%;\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 3fr);\r\n  grid-gap: 10px;\r\n`;\r\nconst PopTvGridItem = styled(Link)`\r\n  cursor: pointer;\r\n  margin-top: 1em;\r\n  width: 200px;\r\n  height: 200px;\r\n\r\n  background-size: 100% 100%;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n\r\n  &:hover {\r\n    opacity: 70%;\r\n    transform: scale(1.08);\r\n  }\r\n`;\r\nfunction PopTv() {\r\n  const [state] = useAsync(popTVURL);\r\n  const { data, error, loading } = state;\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생</div>;\r\n  if (!data) return <div>받아온 데이터가 없습니다 ㅠㅠ</div>;\r\n  return (\r\n    <PopTvWallpaper>\r\n      <h3>인기 있는 프로그램</h3>\r\n      <PopTvGrid>\r\n        {data &&\r\n          data.results.map((item) => (\r\n            <PopTvGridItem\r\n              to={`TVDetail/${item.id}`}\r\n              key={item.id}\r\n              bgImg={item.poster_path}\r\n            ></PopTvGridItem>\r\n          ))}\r\n      </PopTvGrid>\r\n    </PopTvWallpaper>\r\n  );\r\n}\r\n\r\nexport default PopTv;\r\n","import React from \"react\";\r\nimport OnAir from \"./OnAir\";\r\nimport PopTV from \"./PopTV\";\r\n\r\nfunction TV() {\r\n  return (\r\n    <>\r\n      <OnAir />\r\n      <PopTV />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TV;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SearchWallpaper = styled.section`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst SearchForm = styled.form`\r\n  margin-top: 2em;\r\n  input {\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    width: 400px;\r\n    height: 50px;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 30px;\r\n    font-size: 1.2rem;\r\n    box-shadow: 0px 1px 5px 2px rgba(255, 255, 255, 0.8);\r\n    &::placeholder {\r\n      font-size: 1.2rem;\r\n      font-weight: 700;\r\n      color: #020202;\r\n    }\r\n  }\r\n`;\r\nconst SearchItems = styled.div`\r\n  color: white;\r\n  padding-top: 6em;\r\n  margin: 0 auto;\r\n  width: 95%;\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 6fr);\r\n  grid-gap: 60px;\r\n`;\r\nconst SearchItem = styled(Link)`\r\n  cursor: pointer;\r\n  width: 170px;\r\n  height: 150px;\r\n  position: relative;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n  background-size: 100% 100%;\r\n  &:hover {\r\n    opacity: 70%;\r\n    transform: scale(1.08);\r\n  }\r\n  div {\r\n    font-size: 1.1rem;\r\n    position: absolute;\r\n    top: -20%;\r\n  }\r\n`;\r\n\r\nfunction Search() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [movies, setMovie] = useState([]);\r\n  const focusSearch = useRef(null);\r\n\r\n  useEffect(() => {\r\n    focusSearch.current.focus();\r\n  }, []);\r\n\r\n  const getMovie = async (query) => {\r\n    const results = await fetch(\r\n      `https://api.themoviedb.org/3/search/multi?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US&query=${query}&page=1&include_adult=false`\r\n    );\r\n    const movieData = await results.json();\r\n    return movieData.results;\r\n  };\r\n  const sleep = (ms) => {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  };\r\n\r\n  useEffect(() => {\r\n    let currentQuery = true;\r\n    const controller = new AbortController();\r\n    const loadMovies = async () => {\r\n      if (!query) return setMovie([]);\r\n\r\n      await sleep(350);\r\n      if (currentQuery) {\r\n        const movies = await getMovie(query, controller);\r\n        setMovie(movies);\r\n      }\r\n    };\r\n    loadMovies();\r\n\r\n    return () => {\r\n      currentQuery = false;\r\n      controller.abort();\r\n    };\r\n  }, [query]);\r\n\r\n  return (\r\n    <>\r\n      <SearchWallpaper fluid>\r\n        <SearchForm id=\"search-form\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"검색어를 입력하세요.\"\r\n            ref={focusSearch}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            value={query}\r\n          ></input>\r\n        </SearchForm>\r\n        <SearchItems>\r\n          {movies.map((item) => (\r\n            <SearchItem to={`MovieDetail/${item.id}`} bgImg={item.poster_path}>\r\n              <div>{item.title}</div>\r\n            </SearchItem>\r\n          ))}\r\n        </SearchItems>\r\n      </SearchWallpaper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport useAsync from \"../useAsync\";\r\n\r\n//\r\n//\r\n//styled-components\r\nconst DetailWallpaper = styled.section`\r\n  width: 100%;\r\n  height: 94vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n  background-size: 100% 100%;\r\n`;\r\nconst DetailContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n`;\r\nconst DetailPoster = styled.div`\r\n  width: 40%;\r\n  height: 500px;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n  background-size: 100% 100%;\r\n`;\r\nconst DetailContent = styled.div`\r\n  width: 50%;\r\n  h5 {\r\n    font-size: 5rem;\r\n    font-weight: 700;\r\n  }\r\n  div {\r\n    margin-top: 0.8em;\r\n    font-size: 1.8rem;\r\n    font-weight: 600;\r\n  }\r\n  p {\r\n    font-size: 1.8rem;\r\n    width: 80%;\r\n    line-height: 1.5;\r\n    margin-top: 0.8em;\r\n  }\r\n`;\r\n\r\n//styled-components\r\n//\r\n//\r\n\r\nfunction Detail({ match }) {\r\n  const { id } = match.params;\r\n  const detailURL = `https://api.themoviedb.org/3/movie/${id}?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US`;\r\n  const [state] = useAsync(detailURL);\r\n  const { data, error, loading } = state;\r\n  console.log(data && data.production_companies);\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생</div>;\r\n  return (\r\n    <DetailWallpaper bgImg={data && data.backdrop_path}>\r\n      <DetailContainer>\r\n        <DetailPoster bgImg={data && data.poster_path}></DetailPoster>\r\n        <DetailContent>\r\n          <h5>{data && data.original_title}</h5>\r\n          <div>\r\n            💖{data && data.vote_average}/10 --- 상영시간:\r\n            {data && data.runtime}분\r\n          </div>\r\n          <p>{data && data.overview}</p>\r\n        </DetailContent>\r\n      </DetailContainer>\r\n    </DetailWallpaper>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nconst HeaderContainer = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n\r\n  width: 100%;\r\n  height: 50px;\r\n  font-size: 1.1rem;\r\n  color: white;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 99;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\nconst Nav = styled.ul`\r\n  display: flex;\r\n  div {\r\n    width: 200px;\r\n    height: 50px;\r\n    z-index: 999;\r\n  }\r\n`;\r\n\r\nconst NavList = styled.li`\r\n  width: 80px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${(props) => (props.hover ? \"#74b9ff\" : \"transparent\")};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n`;\r\nconst NavLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nfunction Header({ location: { pathname } }) {\r\n  return (\r\n    <HeaderContainer>\r\n      <Nav>\r\n        <NavList hover={pathname === \"/react-sangfilxx\"}>\r\n          <NavLink to=\"/react-sangfilxx\">Movies</NavLink>\r\n        </NavList>\r\n        <NavList hover={pathname === \"/Tv\"}>\r\n          <NavLink to=\"/Tv\">TV</NavLink>\r\n        </NavList>\r\n        <NavList hover={pathname === \"/Search\"}>\r\n          <NavLink to=\"/Search\">Search</NavLink>\r\n        </NavList>\r\n      </Nav>\r\n    </HeaderContainer>\r\n  );\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport useAsync from \"../useAsync\";\r\n\r\n//\r\n//\r\n//styled-components\r\nconst DetailWallpaper = styled.section`\r\n  width: 100%;\r\n  height: 94vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n  background-size: 100% 100%;\r\n`;\r\nconst DetailContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\nconst DetailPoster = styled.div`\r\n  width: 40%;\r\n  height: 500px;\r\n  background-image: url(${(props) =>\r\n    `https://image.tmdb.org/t/p/w500${props.bgImg}`});\r\n  background-size: 100% 100%;\r\n`;\r\nconst DetailContent = styled.div`\r\n  width: 50%;\r\n  h5 {\r\n    font-size: 5rem;\r\n    font-weight: 700;\r\n  }\r\n  div {\r\n    margin-top: 0.8em;\r\n    font-size: 1.8rem;\r\n    font-weight: 600;\r\n  }\r\n  p {\r\n    font-size: 1.8rem;\r\n    width: 80%;\r\n    line-height: 1.5;\r\n    margin-top: 0.8em;\r\n  }\r\n`;\r\n\r\n//styled-components\r\n//\r\n//\r\n\r\nfunction TVDetail({ match }) {\r\n  const { id } = match.params;\r\n  const detailURL = `https://api.themoviedb.org/3/tv/${id}?api_key=cc3aed3fa1f0feef67c25879a942c3db&language=en-US`;\r\n  const [state] = useAsync(detailURL);\r\n  const { data, error, loading } = state;\r\n  console.log(data);\r\n  if (loading) return <div>로딩중...</div>;\r\n  if (error) return <div>에러가 발생</div>;\r\n  return (\r\n    <DetailWallpaper bgImg={data && data.backdrop_path}>\r\n      <DetailContainer>\r\n        <DetailPoster bgImg={data && data.poster_path}></DetailPoster>\r\n        <DetailContent>\r\n          <h5>{data && data.name}</h5>\r\n          <div>\r\n            💖{data && data.vote_average}/10 --- 상영시간:\r\n            {data && data.episode_run_time}분\r\n          </div>\r\n          <p>{data && data.overview}</p>\r\n        </DetailContent>\r\n      </DetailContainer>\r\n    </DetailWallpaper>\r\n  );\r\n}\r\n\r\nexport default TVDetail;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Home from \"../Home/Home\";\r\nimport TV from \"../TV/TV\";\r\nimport Search from \"../Search/Search\";\r\nimport MovieDetail from \"../Datail/MovieDetail\";\r\nimport Header from \"./Header\";\r\nimport TVDetail from \"../Datail/TVDetail\";\r\n\r\nfunction Routes() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/react-sangfilxx\" exact component={Home} />\r\n          <Route path=\"/TV\" component={TV} />\r\n          <Route path=\"/Search\" component={Search} />\r\n          <Route path=\"/MovieDetail/:id\" component={MovieDetail} />\r\n          <Route path=\"/TVDetail/:id\" component={TVDetail} />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\nexport default Routes;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\nconst GlobalStyles = createGlobalStyle`\r\n ${reset};\r\na{\r\n text-decoration:none;\r\n  color:inherit;\r\n}\r\n*{\r\n  box-sizing:border-box;\r\n}\r\nbody{\r\n  font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\nfont-size:1rem;\r\nbackground-color:rgba(20,20,20,1);\r\npadding-top:3.3em;\r\ncolor:white;\r\n\r\n}\r\n`;\r\nexport default GlobalStyles;\r\n","import React from \"react\";\r\nimport Routes from \"./Routes\";\r\nimport GlobalStyles from \"./GlobalStyles\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalStyles />\r\n      <Routes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}